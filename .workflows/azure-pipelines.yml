trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  # Azure service connection established during pipeline creation
  azureSubscription: <Name of your Azure subscription>
  appName: <Name of the function app>
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: UsePythonVersion@0
        displayName: "Setting Python version to 3.7 as required by functions"
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
      - bash: |
          if [ -f extensions.csproj ]
          then
              dotnet build extensions.csproj --output ./bin
          fi
          pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      - script: |
          pip install pytest pytest-azurepipelines
          pip install pytest-cov
          pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
        displayName: pytest
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'
      # - task: PublishCodeCoverageResults@1
      #   inputs:
      #     codeCoverageTool: Cobertura
      #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      - task: ArchiveFiles@2
        displayName: "Archive files"
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
          includeRootFolder: false
          archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
          artifactName: 'drop'

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: $appName
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureFunctionApp@1 # Add this at the end of your file
              inputs:
                azureSubscription: $(azureSubcription)
                appType: functionAppLinux # default is functionApp
                appName: $(appName)
                package: $(System.ArtifactsDirectory)/**/*.zip
                #Uncomment the next lines to deploy to a deployment slot
                #Note that deployment slots is not supported for Linux Dynamic SKU
                #deployToSlotOrASE: true
                #resourceGroupName: '<Resource Group Name>'
                #slotName: '<Slot name>'